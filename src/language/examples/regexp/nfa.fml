import "token.fml" as token
import "set.fml" as set
import "util.fml" as util

const createAutomaton = fun() {
    let this = {};
    let edges = [];
    this.addState = fun() {
        edges = push(edges, []);
        return len(edges)-1;
    }
    this.addEdge = fun(from, label, to) {
        edges[from] = push(edges[from], {"to": to, "label": label});
    }
    this.edgesFrom = fun(from) {
        return deepcopy(edges[from]);
    }
    this.edge = fun(from, label) {
        loop e in edges[from] {
            if e.label == label {
                return e.to;
            }
        }
        return null;
    }
    this.numOfStates = fun() {
        return len(edges);
    }
    this.print = fun() {
        loop i, edge in edges {
            println(i, edge);
        }
    }
    return this;
}

const build = fun(ast) {
    const nfa = createAutomaton();
    nfa.addState();
    nfa.addState();
    const build = fun(from, ast, to) {
        if ast[0] == token.CONCAT {
            const state = nfa.addState();
            build(from, ast[1], state);
            build(state, ast[2], to);
        } else if ast[0] == token.KLEENE {
            const state0 = nfa.addState();
            const state1 = nfa.addState();
            nfa.addEdge(from, null, to);
            nfa.addEdge(from, null, state0);
            nfa.addEdge(state1, null, to);
            nfa.addEdge(state1, null, state0);
            build(state0, ast[1], state1);
        } else if ast[0] == token.ALTERNATIVE {
            build(from, ast[1], to);
            build(from, ast[2], to);
        } else if ast[0] == token.SYMBOL {
            nfa.addEdge(from, ast[1], to);
        } else if ast[0] == token.EPSILON {
        }
    }
    build(0, ast, 1);
    return nfa;
}

const epsClosureSimple = fun (state, automaton) {
    return epsClosure(set.singleton(state), automaton);
}

const epsClosure = fun(states, automaton) {
    const result = set.empty();
    let W = states.getElements();
    loop len(W) != 0 {
        let q = first(W);
        W = rest(W);
        if !result.contains(q) {
            result.put(q);
            const edges = automaton.edgesFrom(q);
            loop e in edges {
                if e.label == null {
                    W = push(W, e.to);
                }
            }
        }
    }
    return result;
}

const epsClosures = fun(automaton) {
    let result = [];
    const numStates = automaton.numOfStates();
    loop state in 0..numStates {
        let from = set.singleton(state);
        result = push(result, epsClosure(from, automaton));
    }
    return result;
}

const nextState = fun(automaton, state, symbol) {
    let S = set.empty();
    const stateElements = state.getElements();
    loop p in stateElements {
        let q = automaton.edge(p, symbol);
        if q != null {
            S.put(q);
        }
    }
    return epsClosure(S, automaton);
}
